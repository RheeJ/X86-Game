Microsoft (R) Macro Assembler Version 6.14.8444		    03/12/15 22:49:56
trig.asm						     Page 1 - 1


				; #########################################################################
				;
				;   trig.asm - Assembly file for EECS205 Assignment 3
				;
				;
				; #########################################################################

				      .586
				      .MODEL FLAT,STDCALL
				      .STACK 4096
				      option casemap :none  ; case sensitive

				    include trig.inc	
			      C ; #########################################################################
			      C ;
			      C ;   trig.inc - Includes for EECS205 Assignment 3
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C ;; FIXED is a fixed point number (16 bit integer and 16 bit fractional components)
			      C ;;    To convert a FIXED value in eax into an integer:  sar eax, 16
			      C ;;    To convert an integer value in eax into a FIXED:  shl eax, 16
			      C FIXED TYPEDEF DWORD
			      C 
			      C EXTERNDEF SINTAB:WORD 
			      C 
			      C FixedSin PROTO STDCALL dwAngle:FIXED 
			      C FixedCos PROTO STDCALL dwAngle:FIXED
			      C 
			      C 
			      C 
			      C 
			      C 

 00000000			.DATA

				;;  These are some useful constants (fixed point values that correspond to important angles)
 = 0001921F			PI_HALF = 102943           	;;  PI / 2
 = 0003243F			PI =  205887	                ;;  PI 
 = 0006487E			TWO_PI	= 411774                ;;  2 * PI 
 = 00517CC1			PI_INC_RECIP =  5340353        	;;  256 / PI   (use this to find the table entry for a given angle
					                        ;;              it is easier to use than divison would be)

 00000000			.CODE

 00000000				FixedSin PROC STDCALL dwAngle:FIXED 
					LOCAL NC: BYTE							;;Implement a binary negative checker.            
 00000006  C6 45 FF 00				mov NC, 0							
 0000000A  8B 45 08				mov eax, dwAngle					;;dwAngle into eax.
 0000000D  83 F8 00				cmp eax, 0							;;Check to see if dwAngle is negative
 00000010  7E 02				jle N	
 00000012  EB 13				jmp T
				      
 00000014				N:										;;If negative run this.   
 00000014  80 75 FF 01				xor NC, 1							
 00000018  BB FFFF0000				mov ebx, 0FFFF0000h					
 0000001D  F7 EB				imul ebx							;;Make dwAngle positive.
 0000001F  C1 E2 10				shl edx, 16
 00000022  C1 E8 10				shr eax, 16
 00000025  33 C2				xor eax, edx						;;Put the multiplication result into one register. Where the top half is integer value and bottom half is fraction value.
					
 00000027				T:										;;Run comparison tests.
 00000027  83 F8 00				cmp eax, 0							;;Negative?
 0000002A  7C E8				jl N
 0000002C  3D 0006487E				cmp eax, TWO_PI						;;Greater than 2pi?                
 00000031  7D 10		    	jge G2								
 00000033  3D 0003243F				cmp eax, PI							;;Greater than pi?		      
 00000038  7D 25				jge G1
 0000003A  3D 0001921F				cmp eax, PI_HALF					;;Greater than pi/2?
 0000003F  7D 30				jge GH         
 00000041  EB 39				jmp L								;;If less than pi/2 than go to default line.

 00000043				G2:										;;Greater than 2pi.
 00000043  2D 0006487E				sub eax, TWO_PI						;;dwAngle - 2pi.
 00000048  3D 0006487E				cmp eax, TWO_PI						;;Still greater than 2pi?
 0000004D  7D F4				jge G2
 0000004F  3D 0003243F				cmp eax, PI							;;Greater than pi?
 00000054  7D 09				jge G1
 00000056  3D 0001921F				cmp eax, PI_HALF					;;Greater than pi/2?
 0000005B  7D 14				jge GH
 0000005D  EB 1D				jmp L								;;If less than pi/2 than go to default line.

 0000005F			    G1:										;;Greater than pi.
 0000005F  80 75 FF 01				xor NC, 1							;;Negative sine values after this point until 2pi.
 00000063  2D 0003243F				sub eax, PI							;;dwAngle - pi.
 00000068  3D 0001921F				cmp eax, PI_HALF					;;Greater than pi/2?
 0000006D  7D 02				jge GH
 0000006F  EB 0B				jmp L								;;If less than pi/2 than go to default line.

 00000071				GH:             
 00000071  BB 0003243F				mov ebx, PI							;;Greater than pi/2.
 00000076  2B D8				sub ebx, eax						;;pi - dwAngle.
 00000078  8B C3				mov eax, ebx
 0000007A  EB 00				jmp L								;;If less than pi/2 than go to default line.

 0000007C				L:										;;Default line.
 0000007C  B9 00517CC1				mov ecx, PI_INC_RECIP
 00000081  F7 E9				imul ecx							;;dwAngle * 256/pi. Integer value held in edx.
 00000083  B8 00000000				mov eax, 0
 00000088  BB 00000000				mov ebx, 0
 0000008D  66| 8B DA				mov bx, dx							;;Take integer value of the multiplication and put into a word.
 00000090  03 DB				add ebx, ebx                                      
 00000092  66| 8B 83				mov ax, [SINTAB + ebx]				;;Use the word as an index for Sine Table.
	   00000000 E
 00000099  EB 00				jmp P1

 0000009B			    P1:
 0000009B  80 7D FF 00				cmp NC, 0							;;See if the value is supposed to be negative
 0000009F  74 0F				je P2
 000000A1  BB FFFF0000				mov ebx, 0FFFF0000h					;;If it is, multiply by fixed value -1.
 000000A6  F7 EB				imul ebx               
 000000A8  C1 E2 10				shl edx, 16
 000000AB  C1 E8 10				shr eax, 16
 000000AE  33 C2				xor eax, edx						;;Put result of multiplication into one register with integer value in top half and fraction value in bottom half.
					
 000000B0				P2:
					ret
 000000B4				FixedSin ENDP

 000000B4				FixedCos PROC STDCALL dwAngle:FIXED
 000000B7  8B 75 08				mov esi, dwAngle
 000000BA  81 C6 0001921F			add esi, PI_HALF
						INVOKE FixedSin, esi				;;Cosine is Sine(dwAngle + pi/2).
						ret
 000000CA				FixedCos ENDP

				END
Microsoft (R) Macro Assembler Version 6.14.8444		    03/12/15 22:49:56
trig.asm						     Symbols 2 - 1




Types:

                N a m e                  Size     Attr

FIXED  . . . . . . . . . . . . .	 00000004     DWord 


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000CA Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

FixedCos . . . . . . . . . . . .	P Near	 000000B4 _TEXT	Length= 00000016 Public STDCALL
  dwAngle  . . . . . . . . . . .	DWord	 bp + 00000008
FixedSin . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000B4 Public STDCALL
  dwAngle  . . . . . . . . . . .	DWord	 bp + 00000008
  NC . . . . . . . . . . . . . .	Byte	 bp - 00000001
  N  . . . . . . . . . . . . . .	L Near	 00000014 _TEXT	
  T  . . . . . . . . . . . . . .	L Near	 00000027 _TEXT	
  G2 . . . . . . . . . . . . . .	L Near	 00000043 _TEXT	
  G1 . . . . . . . . . . . . . .	L Near	 0000005F _TEXT	
  GH . . . . . . . . . . . . . .	L Near	 00000071 _TEXT	
  L  . . . . . . . . . . . . . .	L Near	 0000007C _TEXT	
  P1 . . . . . . . . . . . . . .	L Near	 0000009B _TEXT	
  P2 . . . . . . . . . . . . . .	L Near	 000000B0 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
PI_HALF  . . . . . . . . . . . .	Number	 0001921Fh   
PI_INC_RECIP . . . . . . . . . .	Number	 00517CC1h   
PI . . . . . . . . . . . . . . .	Number	 0003243Fh   
SINTAB . . . . . . . . . . . . .	Word	 00000000 FLAT	External STDCALL
TWO_PI . . . . . . . . . . . . .	Number	 0006487Eh   

	   0 Warnings
	   0 Errors
