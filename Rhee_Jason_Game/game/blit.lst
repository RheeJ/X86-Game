Microsoft (R) Macro Assembler Version 6.14.8444		    03/12/15 22:49:56
blit.asm						     Page 1 - 1


				; #########################################################################
				;
				;   blit.asm - Assembly file for EECS205 Assignment 2
				;
				;
				; #########################################################################

				      .586
				      .MODEL FLAT,STDCALL
				      .STACK 4096
				      option casemap :none  ; case sensitive

				    include blit.inc		; Take a look at this file to understand how
			      C ; #########################################################################
			      C ;
			      C ;   blit.inc - Includes for EECS205 Assignment 2
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C 
 00000010		      C _EECS205BITMAP STRUCT
 00000000  00000000	      C  dwWidth      DWORD  ?
 00000004  00000000	      C  dwHeight     DWORD  ?
 00000008  00		      C  bTransparent BYTE   ?
 00000009  00000003 [	      C               BYTE   3 DUP(?)
	    00
	   ]
 0000000C  00000000	      C  lpBytes      DWORD  ?
			      C _EECS205BITMAP ENDS
			      C 
			      C EECS205BITMAP TYPEDEF _EECS205BITMAP
			      C 
			      C EXTERNDEF StarBitmap:EECS205BITMAP
			      C EXTERNDEF dwPitch:DWORD
			      C EXTERNDEF lpDisplayBits:DWORD
			      C 
			      C 
			      C BlitReg PROTO STDCALL   ; Renders a bitmap to the 2D drawing space
			      C                         ; Uses register passed parameters:
			      C                         ;      esi = x-coordinate (of image center)
			      C                         ;      edi = y-coordinate (of image center)
			      C 			;      edx = pointer to the bitmap to draw
			      C 
			      C 
			      C 
								;      bitmaps are declared

 00000000			.DATA
					;; You may declare helper variables here.
 00000000 00000000			centerX DWORD 0
 00000004 00000000			centerY DWORD 0
 00000008 00000000			Xcount DWORD 0
 0000000C 00000000			Ycount DWORD 0

 00000000			.CODE
				; Routine which draws a bitmap to the screen
 00000000			BlitReg PROC 

				    ;; Here is some C-like pseudocode. You can use this as a starting point
				    ;; 	 (or start from scratch if you feel like it)

				    ;; Feel free to declare variables (global) if it helps. There is a pretty
				    ;;   good chance that you won't fit everything in registers

				    ;; 	for(bmpY = 0;  bmpY < srcBitmap->dwHeight; bmpY++)
				    ;;         	for(bmpX = 0;  bmpX < srcBitmap->dwWidth; bmpX++) {
				    ;; 		        screenX = centerX + bmpX - srcBitmap->dwWidth/2;
				    ;; 		        screenY = centerY + bmpY - srcBitmap->dwHeight/2;
				    ;; 	
				    ;; 			if (srcBitmap->lpBytes[bmpY*srcBitmap->dwWidth+bmpX] != srcBitmap->bTransparent &&
				    ;; 			    screenX >= 0 && screenX <= 639 &&
				    ;; 			    screenY >= 0 && screenY <= 479)
				    ;; 				lpDisplayBits[screenY*dwPitch + screenX] =
				    ;; 					srcBitmap->lpBytes[bmpY*srcBitmap->dwWidth+bmpX]; 
				    ;; 				
				    ;; 		}
					
 00000000  8B DA			mov ebx, edx         ;; store the ptr to srcbitmap into ebx so that mul doesn't write over it
 00000002  C7 05 00000008 R		mov Xcount, 0 
	   00000000
 0000000C  C7 05 0000000C R		mov Ycount, 0
	   00000000
 00000016  89 35 00000000 R		mov centerX, esi     ;; store esi parameter into memory
 0000001C  89 3D 00000004 R		mov centerY, edi     ;; store edi parameter into memory
 00000022  E9 000000A1			jmp T2

 00000027			L1:                                                                     ;; Loop Body
 00000027  8B 0D 00000000 R		mov ecx, centerX 
 0000002D  03 0D 00000008 R		add ecx, Xcount                                                     ;; screenX = centerX + bmpX - srcBitmap->dwWidth/2; 
 00000033  8B 3B			mov edi, (EECS205BITMAP PTR [ebx]).dwWidth                          ;; shr by 1 is same as dividing by 2 but quicker
 00000035  D1 EF			shr edi, 1
 00000037  2B CF			sub ecx, edi
 00000039  A1 00000004 R		mov eax, centerY													;; screenY = centerY + bmpY - srcBitmap->dwHeight/2;
 0000003E  03 05 0000000C R		add eax, Ycount
 00000044  8B 7B 04			mov edi, (EECS205BITMAP PTR [ebx]).dwHeight
 00000047  D1 EF			shr edi, 1
 00000049  2B C7			sub eax, edi
 0000004B  8B 3D 00000000 E		mov edi, [lpDisplayBits]											 ;; move the start of backbuffer
 00000051  83 F9 00			cmp ecx, 0															 ;; screenX >= 0 && screenX <= 639 &&																	
 00000054  0F 8C 00000084		jl N1																 ;; screenY >= 0 && screenY <= 479
 0000005A  81 F9 0000027F		cmp ecx, 639
 00000060  0F 8F 0000008E		jg N2
 00000066  83 F8 00			cmp eax, 0
 00000069  0F 8C 0000009D		jl N3
 0000006F  3D 000001DF			cmp eax, 479
 00000074  0F 8F 000000AC		jg N4
 0000007A  F7 25 00000000 E		mul dwPitch															 ;; lpDisplayBits[screenY*dwPitch + screenX]
 00000080  03 C1			add eax, ecx
 00000082  03 F8			add edi, eax
 00000084  8B 03			mov eax, (EECS205BITMAP PTR [ebx]).dwWidth
 00000086  F7 25 0000000C R		mul Ycount
 0000008C  03 05 00000008 R		add eax, Xcount
 00000092  8B 53 0C			mov edx, (EECS205BITMAP PTR [ebx]).lpBytes							 ;; srcBitmap->lpBytes[bmpY*srcBitmap->dwWidth+bmpX];
 00000095  03 D0			add edx, eax
 00000097  8B 12			mov edx, [edx]
 00000099  3A 53 08			cmp dl, BYTE PTR [ebx + 8]											 ;; srcBitmap->lpBytes[bmpY*srcBitmap->dwWidth+bmpX] != srcBitmap->bTransparent
 0000009C  74 37			je M1
 0000009E  88 17			mov BYTE PTR [edi], dl												 ;; take lower byte of edx, where pixel color is stored and then move it into the backbuffer at address edi
 000000A0  83 05 00000008 R		add Xcount, 1														 ;; x++
	   01
 000000A7  EB 00			jmp T1

 000000A9			T1:							 ;; bmpX < srcBitmap->dwWidth
 000000A9  8B 33			mov esi, [ebx]
 000000AB  39 35 00000008 R		cmp Xcount, esi
 000000B1  0F 8C FFFFFF70		jl L1
 000000B7  C7 05 00000008 R		mov Xcount, 0			 ;; reset x to 0 and then go back to outer loop
	   00000000
 000000C1  83 05 0000000C R		add Ycount, 1			 ;; y++
	   01

 000000C8			T2:                          ;; bmpY < srcBitmap->dwHeight;
 000000C8  8B 73 04			mov esi, (EECS205BITMAP PTR [ebx]).dwHeight	
 000000CB  39 35 0000000C R		cmp Ycount, esi
 000000D1  7C D6			jl T1
 000000D3  EB 6E			jmp Z

 000000D5			M1:							 ;; Transparent body
 000000D5  83 05 00000008 R		add Xcount, 1			 ;; x++ and continue
	   01
 000000DC  EB CB			jmp T1

 000000DE			N1:							 ;; if width goes less than 0
 000000DE  F7 25 00000000 E		mul dwPitch
 000000E4  83 C0 00			add eax, 0				 ;; make the x-coord of pixel = 0
 000000E7  03 F8			add edi, eax
 000000E9  88 17			mov BYTE PTR [edi], dl
 000000EB  83 05 00000008 R		add Xcount, 1
	   01
 000000F2  EB B5			jmp T1

 000000F4			N2:						     ;; if width goes greater than 639
 000000F4  F7 25 00000000 E		mul dwPitch
 000000FA  05 0000027F			add eax, 639			 ;; make the x-coord of pixel = 639
 000000FF  03 F8			add edi, eax
 00000101  88 17			mov BYTE PTR [edi], dl
 00000103  83 05 00000008 R		add Xcount, 1
	   01
 0000010A  EB 9D			jmp T1

 0000010C			N3:							 ;; if height goes less than 0
 0000010C  B8 00000000			mov eax, 0				 ;; make the y-coord of pixel = 0
 00000111  F7 25 00000000 E		mul dwPitch
 00000117  03 C1			add eax, ecx
 00000119  03 F8			add edi, eax
 0000011B  88 17			mov BYTE PTR [edi], dl
 0000011D  83 05 00000008 R		add Xcount, 1
	   01
 00000124  EB 83			jmp T1

 00000126			N4:						     ;; if height goes greater than 479
 00000126  B8 000001DF			mov eax, 479			 ;; make the y-coord of pixel = 479
 0000012B  F7 25 00000000 E		mul dwPitch
 00000131  03 C1			add eax, ecx
 00000133  03 F8			add edi, eax
 00000135  88 17			mov BYTE PTR [edi], dl
 00000137  83 05 00000008 R		add Xcount, 1
	   01
 0000013E  E9 FFFFFF66			jmp T1

 00000143			Z:

 00000143  C3			    ret            
					
					 ;; Don't delete this line
 00000144			BlitReg ENDP





 00000010			.DATA
						
 00000010 00000020		StarBitmap EECS205BITMAP <32, 36, 0ffh,, offset StarBitmap + sizeof StarBitmap>
	   00000024 FF
	   00000003 [
	    00
	   ] 00000020 R
 00000020  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FE
 00000030  FE FF FF FF FF		BYTE 0feh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 00000040  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FE
 00000050  FE FE FF FF FF		BYTE 0feh,0feh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 00000060  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0fdh
	   FF FF FF FF FF
	   FF FF FF FF FE
	   FD
 00000070  F9 F9 FF FF FF		BYTE 0f9h,0f9h,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 00000080  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0fdh
	   FF FF FF FF FF
	   FF FF FF FF FE
	   FD
 00000090  F8 F8 FD FF FF		BYTE 0f8h,0f8h,0fdh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 000000A0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0fdh
	   FF FF FF FF FF
	   FF FF FF FF FE
	   FD
 000000B0  F8 F8 F8 FE FF		BYTE 0f8h,0f8h,0f8h,0feh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 000000C0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0feh,0fdh
	   FF FF FF FF FF
	   FF FF FF FE FE
	   FD
 000000D0  F8 F8 D8 F9 FF		BYTE 0f8h,0f8h,0d8h,0f9h,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 000000E0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0feh,0f9h
	   FF FF FF FF FF
	   FF FF FF FE FE
	   F9
 000000F0  F8 F8 D8 D8 FE		BYTE 0f8h,0f8h,0d8h,0d8h,0feh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 00000100  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0fdh,0f8h
	   FF FF FF FF FF
	   FF FF FF FE FD
	   F8
 00000110  F8 F4 F8 D8 D9		BYTE 0f8h,0f4h,0f8h,0d8h,0d9h,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 00000120  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0fah,0feh,0fdh,0f8h
	   FF FF FF FF FF
	   FF FF FA FE FD
	   F8
 00000130  F8 F4 F8 D8 D8		BYTE 0f8h,0f4h,0f8h,0d8h,0d8h,0fdh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FD FF FF FF FF
	   FF FF FF FF FF
	   FF
 00000140  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0feh,0fdh,0f8h
	   FF FF FF FF FF
	   FF FF FE FE FD
	   F8
 00000150  F4 F4 F4 F8 F8		BYTE 0f4h,0f4h,0f4h,0f8h,0f8h,0d4h,0feh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   D4 FE FF FF FF
	   FF FF FF FF FF
	   FF
 00000160  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0feh,0feh,0f9h,0d4h
	   FF FF FF FF FF
	   FF FE FE FE F9
	   D4
 00000170  F8 F4 F4 D4 F8		BYTE 0f8h,0f4h,0f4h,0d4h,0f8h,0f8h,0d4h,0feh,0feh,0feh,0feh,0feh,0feh,0feh,0ffh,0ffh
	   F8 D4 FE FE FE
	   FE FE FE FE FF
	   FF
 00000180  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0feh,0f9h,0fdh,0f8h,0f8h
	   FF FF FF FF FF
	   FE FE F9 FD F8
	   F8
 00000190  F4 F8 F4 F4 F8		BYTE 0f4h,0f8h,0f4h,0f4h,0f8h,0d4h,0d4h,0f8h,0d9h,0d9h,0d9h,0f9h,0d9h,0f9h,0d9h,0fah
	   D4 D4 F8 D9 D9
	   D9 F9 D9 F9 D9
	   FA
 000001A0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0feh,0fdh,0f9h,0f8h,0f8h,0f8h,0f8h
	   FF FF FF FE FE
	   FD F9 F8 F8 F8
	   F8
 000001B0  F8 D4 F8 F8 F4		BYTE 0f8h,0d4h,0f8h,0f8h,0f4h,0f8h,0f8h,0d8h,0f8h,0f8h,0f8h,0f8h,0d8h,0d4h,0d5h,0feh
	   F8 F8 D8 F8 F8
	   F8 F8 D8 D4 D5
	   FE
 000001C0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0feh,0feh,0f9h,0f9h,0f8h,0f8h,0fch,0fch,0f8h,0f8h
	   FE FE FE F9 F9
	   F8 F8 FC FC F8
	   F8
 000001D0  F8 F8 F8 F8 F4		BYTE 0f8h,0f8h,0f8h,0f8h,0f4h,0f8h,0b0h,0d8h,0d8h,0f8h,0f8h,0f4h,0f8h,0d8h,0d9h,0feh
	   F8 B0 D8 D8 F8
	   F8 F4 F8 D8 D9
	   FE
 000001E0  FF FF FE FD F9		BYTE 0ffh,0ffh,0feh,0fdh,0f9h,0f8h,0f8h,0f8h,0f8h,0f8h,0fdh,0fdh,0f8h,0f8h,0f8h,0f8h
	   F8 F8 F8 F8 F8
	   FD FD F8 F8 F8
	   F8
 000001F0  F8 B0 D8 F8 F8		BYTE 0f8h,0b0h,0d8h,0f8h,0f8h,0f8h,044h,08ch,0d4h,0d8h,0d4h,0d4h,0d4h,0d4h,0feh,0ffh
	   F8 44 8C D4 D8
	   D4 D4 D4 D4 FE
	   FF
 00000200  FE FE D9 D8 F8		BYTE 0feh,0feh,0d9h,0d8h,0f8h,0f8h,0fch,0fch,0f8h,0f8h,0f8h,0f8h,0f8h,0f8h,0f8h,0fch
	   F8 FC FC F8 F8
	   F8 F8 F8 F8 F8
	   FC
 00000210  F8 6C 6C FC F8		BYTE 0f8h,06ch,06ch,0fch,0f8h,0d8h,06ch,06ch,0d4h,0f8h,0d4h,0d4h,0d4h,0d5h,0ffh,0ffh
	   D8 6C 6C D4 F8
	   D4 D4 D4 D5 FF
	   FF
 00000220  FF DA D4 D4 F8		BYTE 0ffh,0dah,0d4h,0d4h,0f8h,0f8h,0f8h,0f8h,0f4h,0f4h,0f4h,0f8h,0f8h,0f8h,0fch,0fch
	   F8 F8 F8 F4 F4
	   F4 F8 F8 F8 FC
	   FC
 00000230  FD 6C 6C FD FC		BYTE 0fdh,06ch,06ch,0fdh,0fch,0d8h,048h,068h,0f8h,0d4h,0d4h,0d4h,0d4h,0feh,0ffh,0ffh
	   D8 48 68 F8 D4
	   D4 D4 D4 FE FF
	   FF
 00000240  FF FF FE D8 D4		BYTE 0ffh,0ffh,0feh,0d8h,0d4h,0f4h,0f8h,0f4h,0f4h,0f4h,0f8h,0f8h,0f8h,0f8h,0fch,0fch
	   F4 F8 F4 F4 F4
	   F8 F8 F8 F8 FC
	   FC
 00000250  FD 48 48 FD FC		BYTE 0fdh,048h,048h,0fdh,0fch,0fch,044h,024h,0f8h,0d4h,0d4h,0d4h,0d9h,0ffh,0ffh,0ffh
	   FC 44 24 F8 D4
	   D4 D4 D9 FF FF
	   FF
 00000260  FF FF FF FE F9		BYTE 0ffh,0ffh,0ffh,0feh,0f9h,0f8h,0f8h,0f8h,0f8h,0f8h,0f8h,0f8h,0f8h,0fch,0fch,0fch
	   F8 F8 F8 F8 F8
	   F8 F8 F8 FC FC
	   FC
 00000270  FD 48 00 FD FC		BYTE 0fdh,048h,000h,0fdh,0fch,0f8h,048h,024h,0f8h,0f4h,0d4h,0d5h,0ffh,0ffh,0ffh,0ffh
	   F8 48 24 F8 F4
	   D4 D5 FF FF FF
	   FF
 00000280  FF FF FF FF FE		BYTE 0ffh,0ffh,0ffh,0ffh,0feh,0f9h,0f8h,0f8h,0d8h,0f8h,0f8h,0f8h,0f8h,0fch,0fch,0fch
	   F9 F8 F8 D8 F8
	   F8 F8 F8 FC FC
	   FC
 00000290  FC 6C 20 F8 FC		BYTE 0fch,06ch,020h,0f8h,0fch,0fch,090h,044h,0f8h,0f4h,0d4h,0fah,0ffh,0ffh,0ffh,0ffh
	   FC 90 44 F8 F4
	   D4 FA FF FF FF
	   FF
 000002A0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0fdh,0f9h,0d8h,0d8h,0f8h,0f8h,0f8h,0fch,0fch,0fch
	   FF FD F9 D8 D8
	   F8 F8 F8 FC FC
	   FC
 000002B0  FC B4 20 FD FC		BYTE 0fch,0b4h,020h,0fdh,0fch,0fch,0d8h,0d8h,0f8h,0f4h,0d5h,0feh,0ffh,0ffh,0ffh,0ffh
	   FC D8 D8 F8 F4
	   D5 FE FF FF FF
	   FF
 000002C0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0f9h,0d8h,0f8h,0f8h,0f8h,0fch,0fch,0fch
	   FF FF FE F9 D8
	   F8 F8 F8 FC FC
	   FC
 000002D0  FC FC FC FC FC		BYTE 0fch,0fch,0fch,0fch,0fch,0fch,0f8h,0d8h,0f8h,0f4h,0d5h,0feh,0ffh,0ffh,0ffh,0ffh
	   FC F8 D8 F8 F4
	   D5 FE FF FF FF
	   FF
 000002E0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0f9h,0f8h,0f8h,0f8h,0fch,0fch,0fch
	   FF FF FF FE F9
	   F8 F8 F8 FC FC
	   FC
 000002F0  FC FC FC FC FC		BYTE 0fch,0fch,0fch,0fch,0fch,0fch,0fch,0d8h,0f8h,0d4h,0d4h,0feh,0ffh,0ffh,0ffh,0ffh
	   FC FC D8 F8 D4
	   D4 FE FF FF FF
	   FF
 00000300  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0f8h,0f8h,0f8h,0f8h,0fch,0fch
	   FF FF FF FF FE
	   F8 F8 F8 F8 FC
	   FC
 00000310  FC FC FC FC FC		BYTE 0fch,0fch,0fch,0fch,0fch,0f8h,0f8h,0d8h,0f8h,0d4h,0d4h,0feh,0ffh,0ffh,0ffh,0ffh
	   F8 F8 D8 F8 D4
	   D4 FE FF FF FF
	   FF
 00000320  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0f8h,0f8h,0f8h,0f8h,0f8h,0fch
	   FF FF FF FF FE
	   F8 F8 F8 F8 F8
	   FC
 00000330  FC FC FC FC F8		BYTE 0fch,0fch,0fch,0fch,0f8h,0f8h,0f8h,0d8h,0d4h,0d4h,0d4h,0feh,0ffh,0ffh,0ffh,0ffh
	   F8 F8 D8 D4 D4
	   D4 FE FF FF FF
	   FF
 00000340  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0f8h,0f8h,0f8h,0f8h,0f8h,0f8h
	   FF FF FF FF FE
	   F8 F8 F8 F8 F8
	   F8
 00000350  F8 FC F8 F8 F8		BYTE 0f8h,0fch,0f8h,0f8h,0f8h,0f8h,0d8h,0f8h,0f4h,0d4h,0d4h,0f9h,0ffh,0ffh,0ffh,0ffh
	   F8 D8 F8 F4 D4
	   D4 F9 FF FF FF
	   FF
 00000360  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0f8h,0f8h,0f4h,0f8h,0f8h,0f8h
	   FF FF FF FF FE
	   F8 F8 F4 F8 F8
	   F8
 00000370  F8 F8 F8 F8 F8		BYTE 0f8h,0f8h,0f8h,0f8h,0f8h,0f8h,0f8h,0d4h,0d4h,0d4h,0f4h,0f9h,0ffh,0ffh,0ffh,0ffh
	   F8 F8 D4 D4 D4
	   F4 F9 FF FF FF
	   FF
 00000380  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0fah,0f8h,0f4h,0f4h,0f8h,0f8h,0f8h
	   FF FF FF FF FA
	   F8 F4 F4 F8 F8
	   F8
 00000390  F8 F8 F8 F8 D4		BYTE 0f8h,0f8h,0f8h,0f8h,0d4h,0d4h,0d4h,0d4h,0d4h,0d4h,0d4h,0d5h,0ffh,0ffh,0ffh,0ffh
	   D4 D4 D4 D4 D4
	   D4 D5 FF FF FF
	   FF
 000003A0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0fah,0f8h,0f4h,0f4h,0f4h,0f4h,0d4h
	   FF FF FF FF FA
	   F8 F4 F4 F4 F4
	   D4
 000003B0  D4 D8 D4 F9 F9		BYTE 0d4h,0d8h,0d4h,0f9h,0f9h,0d5h,0b0h,0d4h,0d4h,0d4h,0d4h,0d4h,0ffh,0ffh,0ffh,0ffh
	   D5 B0 D4 D4 D4
	   D4 D4 FF FF FF
	   FF
 000003C0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0f9h,0f8h,0f4h,0f4h,0f4h,0d4h,0d4h
	   FF FF FF FF F9
	   F8 F4 F4 F4 D4
	   D4
 000003D0  D8 D4 FE FF FF		BYTE 0d8h,0d4h,0feh,0ffh,0ffh,0ffh,0feh,0d5h,0d5h,0d4h,0d4h,0d5h,0ffh,0ffh,0ffh,0ffh
	   FF FE D5 D5 D4
	   D4 D5 FF FF FF
	   FF
 000003E0  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0f9h,0f8h,0f4h,0f4h,0f4h,0d4h,0d8h
	   FF FF FF FF F9
	   F8 F4 F4 F4 D4
	   D8
 000003F0  D5 FE FF FF FF		BYTE 0d5h,0feh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0fah,0d5h,0b5h,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FA
	   D5 B5 FF FF FF
	   FF
 00000400  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0f9h,0f4h,0f4h,0f4h,0d4h,0d4h,0f9h
	   FF FF FF FF F9
	   F4 F4 F4 D4 D4
	   F9
 00000410  FE FF FF FF FF		BYTE 0feh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 00000420  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0d9h,0d8h,0d4h,0d4h,0d5h,0fah,0ffh
	   FF FF FF FF D9
	   D8 D4 D4 D5 FA
	   FF
 00000430  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 00000440  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0fah,0d4h,0d4h,0d5h,0feh,0ffh,0ffh
	   FF FF FF FF FA
	   D4 D4 D5 FE FF
	   FF
 00000450  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 00000460  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0dah,0d5h,0d4h,0feh,0ffh,0ffh,0ffh
	   FF FF FF FF DA
	   D5 D4 FE FF FF
	   FF
 00000470  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
 00000480  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0feh,0f9h,0feh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FE
	   F9 FE FF FF FF
	   FF
 00000490  FF FF FF FF FF		BYTE 0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh,0ffh
	   FF FF FF FF FF
	   FF FF FF FF FF
	   FF
						

				END
Microsoft (R) Macro Assembler Version 6.14.8444		    03/12/15 22:49:56
blit.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

_EECS205BITMAP . . . . . . . . .	 00000010
  dwWidth  . . . . . . . . . . .	 00000000	 DWord
  dwHeight . . . . . . . . . . .	 00000004	 DWord
  bTransparent . . . . . . . . .	 00000008	 Byte
  lpBytes  . . . . . . . . . . .	 0000000C	 DWord


Types:

                N a m e                  Size     Attr

EECS205BITMAP  . . . . . . . . .	 00000010     _EECS205BITMAP 


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004A0 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000144 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

BlitReg  . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000144 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000027 _TEXT	
  T1 . . . . . . . . . . . . . .	L Near	 000000A9 _TEXT	
  T2 . . . . . . . . . . . . . .	L Near	 000000C8 _TEXT	
  M1 . . . . . . . . . . . . . .	L Near	 000000D5 _TEXT	
  N1 . . . . . . . . . . . . . .	L Near	 000000DE _TEXT	
  N2 . . . . . . . . . . . . . .	L Near	 000000F4 _TEXT	
  N3 . . . . . . . . . . . . . .	L Near	 0000010C _TEXT	
  N4 . . . . . . . . . . . . . .	L Near	 00000126 _TEXT	
  Z  . . . . . . . . . . . . . .	L Near	 00000143 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
StarBitmap . . . . . . . . . . .	_EECS205BITMAP  00000010 _DATA	Public STDCALL
Xcount . . . . . . . . . . . . .	DWord	 00000008 _DATA	
Ycount . . . . . . . . . . . . .	DWord	 0000000C _DATA	
centerX  . . . . . . . . . . . .	DWord	 00000000 _DATA	
centerY  . . . . . . . . . . . .	DWord	 00000004 _DATA	
dwPitch  . . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
lpDisplayBits  . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL

	   0 Warnings
	   0 Errors
